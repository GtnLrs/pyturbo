from typing import Dict

from cosapp.systems import System
from OCC.Core.TopoDS import TopoDS_Shape

from pyturbo.systems.fan_module import FanModule
from pyturbo.systems.gas_generator import GasGenerator
from pyturbo.systems.inlet import Inlet
from pyturbo.systems.nacelle import Nacelle, Plug
from pyturbo.systems.nozzle import Nozzle
from pyturbo.systems.structures import Channel, CoreCowl, FanDuct
from pyturbo.systems.turbine import LPT
from pyturbo.systems.turbofan.turbofan_aero import TurbofanAero
from pyturbo.systems.turbofan.turbofan_geom import TurbofanGeom
from pyturbo.systems.turbofan.turbofan_weight import TurbofanWeight
from pyturbo.utils import JupyterViewable


class Turbofan(System, JupyterViewable):
    """Turbofan assembly system.

    Sub-systems
    -----------
    inlet: Inlet
        inlet before the fan
    fanmodule: FanModule
        fan module made of fan, booster, ogv, ic and shaft
    core: GasGenerator
        core is made of HPC, combustor and HPT
    turbine: LPT
        low pressure turbine
    trf: Channel
        turbine rear frame
    primary_nozzle: Nozzle
        nozzle in the primary flow
    secondary_nozzle: Nozzle
        nozzle in the secondary flow
    nacelle: Nacelle
        nacelle

    aero: TurbofanAero
        turbofan aero performances computed from components
    weight: TurbofanWeight
        weight evaluation from geometry

    Inputs
    ------
    fl_in: FluidPort
        inlet fluid as seen by engine

    pamb[Pa]: float
        ambiant pressure

    fan_diameter[m]: float
        diameter of the fan

    fuel_W[kg/s]: float
        fuel mass flow

    Outputs
    -------
    ipps_weight[kg]: float
        ipps weight
    thrust[N]: float
        total thrust generated by engine and nacelle
    bpr[-]: float
        by pass ratio = secondary flow / primary flow
    opr[-]: float
        overall pressure ration
    sfc[-]: float
        specific fuel consumption
    N1[rpm]: float
        Low pressure spool speed rotation
    N2[rpm]: float
        High pressure spool speed rotation
    pr_split[-]: float
        pressure split between fan module and core

    """

    def setup(self):
        # physics
        self.add_child(TurbofanGeom("geom"), pulling=["fan_diameter", "frd_mount", "aft_mount"])

        # component
        self.add_child(Inlet("inlet"), pulling=["fl_in", "pamb"])
        self.add_child(FanModule("fan_module"), pulling={"bpr": "bpr", "N": "N1"})
        self.add_child(FanDuct("fan_duct"))
        self.add_child(GasGenerator("core"), pulling={"fuel_W": "fuel_W", "N": "N2"})
        self.add_child(LPT("turbine"))
        self.add_child(Channel("trf"))
        self.add_child(Nozzle("primary_nozzle"), pulling=["pamb"])
        self.add_child(
            Nozzle("secondary_nozzle"),
            pulling=["pamb"],
        )
        self.add_child(Nacelle("nacelle"))
        self.add_child(Plug("plug"))
        self.add_child(CoreCowl("core_cowl"))

        # physics
        self.add_child(TurbofanAero("aero"), pulling=["fuel_W", "opr", "thrust", "pr_split", "sfc"])
        self.add_child(TurbofanWeight("weight"), pulling=["ipps_weight"])

        # shaft connectors
        self.connect(self.turbine.sh_out, self.fan_module.sh_in)

        # fluid connectors
        self.connect(self.inlet.fl_out, self.fan_module.fl_in)
        self.connect(self.fan_module.fl_bypass, self.fan_duct.fl_in)
        self.connect(self.fan_duct.fl_out, self.secondary_nozzle.fl_in)

        self.connect(self.fan_module.fl_core, self.core.fl_in)
        self.connect(self.core.fl_out, self.turbine.fl_in)
        self.connect(self.turbine.fl_out, self.trf.fl_in)
        self.connect(self.trf.fl_out, self.primary_nozzle.fl_in)

        # geometry connectors
        self.connect(
            self.geom,
            self.inlet,
            ["fan_inlet_tip_kp"],
        )
        self.connect(
            self.geom,
            self.fan_module,
            {"fan_diameter": "fan_diameter", "fan_module_length": "length"},
        )
        self.connect(self.geom.core_kp, self.core.kp)
        self.connect(self.geom.turbine_kp, self.turbine.kp)
        self.connect(self.geom.trf_kp, self.trf.kp)
        self.connect(self.geom.primary_nozzle_kp, self.primary_nozzle.kp)
        self.connect(self.geom.secondary_nozzle_kp, self.secondary_nozzle.kp)
        self.connect(
            self.geom,
            self.nacelle,
            [
                "ogv_exit_tip_kp",
                # "turbine_exit_tip_kp",
                "sec_nozzle_exit_kp",
            ],
        )
        self.connect(
            self.inlet,
            self.nacelle,
            ["hilite_kp"],
        )
        self.connect(self, self.nacelle, ["fan_diameter"])
        self.connect(self.trf.kp, self.plug.inwards, {"exit_hub": "trf_exit_hub_kp"})
        self.connect(self.geom.secondary_nozzle_kp, self.fan_duct.kp)

        self.connect(self.geom, self.fan_duct, ["core_cowl_slope"])

        self.connect(
            self.geom,
            self.core_cowl,
            {"sec_nozzle_exit_hub_kp": "inlet_kp", "pri_nozzle_exit_kp": "exit_kp"},
        )

        # aerodynamic performance connectors
        self.connect(self.inlet.outwards, self.aero.inwards, {"drag": "inlet_drag"})
        self.connect(self.fan_module.outwards, self.aero.inwards, {"pr": "booster_pr"})
        self.connect(self.core.outwards, self.aero.inwards, {"opr": "core_opr"})
        self.connect(
            self.primary_nozzle.outwards, self.aero.inwards, {"thrust": "primary_nozzle_thrust"}
        )
        self.connect(
            self.secondary_nozzle.outwards, self.aero.inwards, {"thrust": "secondary_nozzle_thrust"}
        )

        # weight connectors
        self.connect(self, self.weight, "fan_diameter")
        self.connect(self.geom, self.weight, {"engine_length": "length"})

        # init
        self.fl_in.W = 400

    def _to_occt(self) -> Dict[str, TopoDS_Shape]:
        return dict(
            inlet=self.inlet._to_occt(),
            fan_module=self.fan_module._to_occt(),
            fan_duct=self.fan_duct.geom._to_occt(),
            gas_generator=self.core._to_occt(),
            turbine=self.turbine.geom._to_occt(),
            trf=self.trf.geom._to_occt(),
            # primary_nozzle=self.primary_nozzle.geom._to_occt(),
            # secondary_nozzle=self.secondary_nozzle.geom._to_occt(),
            nacelle=self.nacelle.geom._to_occt(),
            plug=self.plug.geom._to_occt(),
            core_cowl=self.core_cowl._to_occt(),
        )
